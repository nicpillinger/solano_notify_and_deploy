namespace :solano do
  desc 'notify hipchat on build events'
  task :notify do
    notify_build_status
  end

  desc 'notify hipchat on build events, deploy on successful build'
  task :notify_and_deploy do
    notify_build_status "- will not deploy, to deploy manually try rake solano:deploy"
    next unless build_passed?
    deploy
  end

  desc 'run the deploy (notify on failure)'
  task :deploy do
    deploy
  end

  private

    def tddium?
      ENV['TDDIUM'].present?
    end

    def passed?
      ENV['TDDIUM_BUILD_STATUS'] == 'passed'
    end

    def build_passed?
      tddium? && passed?
    end

    def deploy
      succeeded = false
      message = ""

      begin
        succeeded = system('curl -X POST -d "" <%= deploy_hook_url %>')
      rescue Exception => e
        succeeded = false
        message = e.message
      end

      unless succeeded
        notify "Deploy failed: #{message}", 'red'
        raise "deployment failed"
      end
    end

    def notify_build_status(failed_message = '')
      notify hipchat_api_key, hipchat_room_id, "Build succeeded", "green" and return if build_passed?
      notify hipchat_api_key, hipchat_room_id, "Build failed #{failed_message}", "yellow"
    end

    def notify(message, colour)
      client = HipChat::Client.new('<%= hipchat_api_key %>')
      client['<%= hipchat_room_id %>'].send('Solano CI', message, :color => colour)
    end

end
